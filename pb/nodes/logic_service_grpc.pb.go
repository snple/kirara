// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: nodes/logic_service.proto

package nodes

import (
	context "context"
	pb "github.com/snple/kirara/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FnService_Create_FullMethodName          = "/nodes.FnService/Create"
	FnService_Update_FullMethodName          = "/nodes.FnService/Update"
	FnService_View_FullMethodName            = "/nodes.FnService/View"
	FnService_Name_FullMethodName            = "/nodes.FnService/Name"
	FnService_Delete_FullMethodName          = "/nodes.FnService/Delete"
	FnService_List_FullMethodName            = "/nodes.FnService/List"
	FnService_Link_FullMethodName            = "/nodes.FnService/Link"
	FnService_ViewWithDeleted_FullMethodName = "/nodes.FnService/ViewWithDeleted"
	FnService_Pull_FullMethodName            = "/nodes.FnService/Pull"
	FnService_Sync_FullMethodName            = "/nodes.FnService/Sync"
)

// FnServiceClient is the client API for FnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FnServiceClient interface {
	Create(ctx context.Context, in *pb.Fn, opts ...grpc.CallOption) (*pb.Fn, error)
	Update(ctx context.Context, in *pb.Fn, opts ...grpc.CallOption) (*pb.Fn, error)
	View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Fn, error)
	Name(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Fn, error)
	Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	List(ctx context.Context, in *FnListRequest, opts ...grpc.CallOption) (*FnListResponse, error)
	Link(ctx context.Context, in *FnLinkRequest, opts ...grpc.CallOption) (*pb.MyBool, error)
	ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Fn, error)
	Pull(ctx context.Context, in *FnPullRequest, opts ...grpc.CallOption) (*FnPullResponse, error)
	Sync(ctx context.Context, in *pb.Fn, opts ...grpc.CallOption) (*pb.MyBool, error)
}

type fnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFnServiceClient(cc grpc.ClientConnInterface) FnServiceClient {
	return &fnServiceClient{cc}
}

func (c *fnServiceClient) Create(ctx context.Context, in *pb.Fn, opts ...grpc.CallOption) (*pb.Fn, error) {
	out := new(pb.Fn)
	err := c.cc.Invoke(ctx, FnService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fnServiceClient) Update(ctx context.Context, in *pb.Fn, opts ...grpc.CallOption) (*pb.Fn, error) {
	out := new(pb.Fn)
	err := c.cc.Invoke(ctx, FnService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fnServiceClient) View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Fn, error) {
	out := new(pb.Fn)
	err := c.cc.Invoke(ctx, FnService_View_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fnServiceClient) Name(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Fn, error) {
	out := new(pb.Fn)
	err := c.cc.Invoke(ctx, FnService_Name_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fnServiceClient) Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, FnService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fnServiceClient) List(ctx context.Context, in *FnListRequest, opts ...grpc.CallOption) (*FnListResponse, error) {
	out := new(FnListResponse)
	err := c.cc.Invoke(ctx, FnService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fnServiceClient) Link(ctx context.Context, in *FnLinkRequest, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, FnService_Link_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fnServiceClient) ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Fn, error) {
	out := new(pb.Fn)
	err := c.cc.Invoke(ctx, FnService_ViewWithDeleted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fnServiceClient) Pull(ctx context.Context, in *FnPullRequest, opts ...grpc.CallOption) (*FnPullResponse, error) {
	out := new(FnPullResponse)
	err := c.cc.Invoke(ctx, FnService_Pull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fnServiceClient) Sync(ctx context.Context, in *pb.Fn, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, FnService_Sync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FnServiceServer is the server API for FnService service.
// All implementations must embed UnimplementedFnServiceServer
// for forward compatibility
type FnServiceServer interface {
	Create(context.Context, *pb.Fn) (*pb.Fn, error)
	Update(context.Context, *pb.Fn) (*pb.Fn, error)
	View(context.Context, *pb.Id) (*pb.Fn, error)
	Name(context.Context, *pb.Name) (*pb.Fn, error)
	Delete(context.Context, *pb.Id) (*pb.MyBool, error)
	List(context.Context, *FnListRequest) (*FnListResponse, error)
	Link(context.Context, *FnLinkRequest) (*pb.MyBool, error)
	ViewWithDeleted(context.Context, *pb.Id) (*pb.Fn, error)
	Pull(context.Context, *FnPullRequest) (*FnPullResponse, error)
	Sync(context.Context, *pb.Fn) (*pb.MyBool, error)
	mustEmbedUnimplementedFnServiceServer()
}

// UnimplementedFnServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFnServiceServer struct {
}

func (UnimplementedFnServiceServer) Create(context.Context, *pb.Fn) (*pb.Fn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFnServiceServer) Update(context.Context, *pb.Fn) (*pb.Fn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFnServiceServer) View(context.Context, *pb.Id) (*pb.Fn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedFnServiceServer) Name(context.Context, *pb.Name) (*pb.Fn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedFnServiceServer) Delete(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFnServiceServer) List(context.Context, *FnListRequest) (*FnListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFnServiceServer) Link(context.Context, *FnLinkRequest) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedFnServiceServer) ViewWithDeleted(context.Context, *pb.Id) (*pb.Fn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWithDeleted not implemented")
}
func (UnimplementedFnServiceServer) Pull(context.Context, *FnPullRequest) (*FnPullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedFnServiceServer) Sync(context.Context, *pb.Fn) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedFnServiceServer) mustEmbedUnimplementedFnServiceServer() {}

// UnsafeFnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FnServiceServer will
// result in compilation errors.
type UnsafeFnServiceServer interface {
	mustEmbedUnimplementedFnServiceServer()
}

func RegisterFnServiceServer(s grpc.ServiceRegistrar, srv FnServiceServer) {
	s.RegisterService(&FnService_ServiceDesc, srv)
}

func _FnService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Fn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FnServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FnService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FnServiceServer).Create(ctx, req.(*pb.Fn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FnService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Fn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FnServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FnService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FnServiceServer).Update(ctx, req.(*pb.Fn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FnService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FnServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FnService_View_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FnServiceServer).View(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FnService_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FnServiceServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FnService_Name_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FnServiceServer).Name(ctx, req.(*pb.Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _FnService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FnServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FnService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FnServiceServer).Delete(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FnService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FnListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FnServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FnService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FnServiceServer).List(ctx, req.(*FnListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FnService_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FnLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FnServiceServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FnService_Link_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FnServiceServer).Link(ctx, req.(*FnLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FnService_ViewWithDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FnServiceServer).ViewWithDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FnService_ViewWithDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FnServiceServer).ViewWithDeleted(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _FnService_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FnPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FnServiceServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FnService_Pull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FnServiceServer).Pull(ctx, req.(*FnPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FnService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Fn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FnServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FnService_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FnServiceServer).Sync(ctx, req.(*pb.Fn))
	}
	return interceptor(ctx, in, info, handler)
}

// FnService_ServiceDesc is the grpc.ServiceDesc for FnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodes.FnService",
	HandlerType: (*FnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FnService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FnService_Update_Handler,
		},
		{
			MethodName: "View",
			Handler:    _FnService_View_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _FnService_Name_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FnService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _FnService_List_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _FnService_Link_Handler,
		},
		{
			MethodName: "ViewWithDeleted",
			Handler:    _FnService_ViewWithDeleted_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _FnService_Pull_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _FnService_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodes/logic_service.proto",
}

const (
	LogicService_Create_FullMethodName          = "/nodes.LogicService/Create"
	LogicService_Update_FullMethodName          = "/nodes.LogicService/Update"
	LogicService_View_FullMethodName            = "/nodes.LogicService/View"
	LogicService_Name_FullMethodName            = "/nodes.LogicService/Name"
	LogicService_Delete_FullMethodName          = "/nodes.LogicService/Delete"
	LogicService_List_FullMethodName            = "/nodes.LogicService/List"
	LogicService_ViewWithDeleted_FullMethodName = "/nodes.LogicService/ViewWithDeleted"
	LogicService_Pull_FullMethodName            = "/nodes.LogicService/Pull"
	LogicService_Sync_FullMethodName            = "/nodes.LogicService/Sync"
)

// LogicServiceClient is the client API for LogicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogicServiceClient interface {
	Create(ctx context.Context, in *pb.Logic, opts ...grpc.CallOption) (*pb.Logic, error)
	Update(ctx context.Context, in *pb.Logic, opts ...grpc.CallOption) (*pb.Logic, error)
	View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Logic, error)
	Name(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Logic, error)
	Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	List(ctx context.Context, in *LogicListRequest, opts ...grpc.CallOption) (*LogicListResponse, error)
	ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Logic, error)
	Pull(ctx context.Context, in *LogicPullRequest, opts ...grpc.CallOption) (*LogicPullResponse, error)
	Sync(ctx context.Context, in *pb.Logic, opts ...grpc.CallOption) (*pb.MyBool, error)
}

type logicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogicServiceClient(cc grpc.ClientConnInterface) LogicServiceClient {
	return &logicServiceClient{cc}
}

func (c *logicServiceClient) Create(ctx context.Context, in *pb.Logic, opts ...grpc.CallOption) (*pb.Logic, error) {
	out := new(pb.Logic)
	err := c.cc.Invoke(ctx, LogicService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServiceClient) Update(ctx context.Context, in *pb.Logic, opts ...grpc.CallOption) (*pb.Logic, error) {
	out := new(pb.Logic)
	err := c.cc.Invoke(ctx, LogicService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServiceClient) View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Logic, error) {
	out := new(pb.Logic)
	err := c.cc.Invoke(ctx, LogicService_View_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServiceClient) Name(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Logic, error) {
	out := new(pb.Logic)
	err := c.cc.Invoke(ctx, LogicService_Name_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServiceClient) Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, LogicService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServiceClient) List(ctx context.Context, in *LogicListRequest, opts ...grpc.CallOption) (*LogicListResponse, error) {
	out := new(LogicListResponse)
	err := c.cc.Invoke(ctx, LogicService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServiceClient) ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Logic, error) {
	out := new(pb.Logic)
	err := c.cc.Invoke(ctx, LogicService_ViewWithDeleted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServiceClient) Pull(ctx context.Context, in *LogicPullRequest, opts ...grpc.CallOption) (*LogicPullResponse, error) {
	out := new(LogicPullResponse)
	err := c.cc.Invoke(ctx, LogicService_Pull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicServiceClient) Sync(ctx context.Context, in *pb.Logic, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, LogicService_Sync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicServiceServer is the server API for LogicService service.
// All implementations must embed UnimplementedLogicServiceServer
// for forward compatibility
type LogicServiceServer interface {
	Create(context.Context, *pb.Logic) (*pb.Logic, error)
	Update(context.Context, *pb.Logic) (*pb.Logic, error)
	View(context.Context, *pb.Id) (*pb.Logic, error)
	Name(context.Context, *pb.Name) (*pb.Logic, error)
	Delete(context.Context, *pb.Id) (*pb.MyBool, error)
	List(context.Context, *LogicListRequest) (*LogicListResponse, error)
	ViewWithDeleted(context.Context, *pb.Id) (*pb.Logic, error)
	Pull(context.Context, *LogicPullRequest) (*LogicPullResponse, error)
	Sync(context.Context, *pb.Logic) (*pb.MyBool, error)
	mustEmbedUnimplementedLogicServiceServer()
}

// UnimplementedLogicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogicServiceServer struct {
}

func (UnimplementedLogicServiceServer) Create(context.Context, *pb.Logic) (*pb.Logic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLogicServiceServer) Update(context.Context, *pb.Logic) (*pb.Logic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLogicServiceServer) View(context.Context, *pb.Id) (*pb.Logic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedLogicServiceServer) Name(context.Context, *pb.Name) (*pb.Logic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedLogicServiceServer) Delete(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLogicServiceServer) List(context.Context, *LogicListRequest) (*LogicListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedLogicServiceServer) ViewWithDeleted(context.Context, *pb.Id) (*pb.Logic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWithDeleted not implemented")
}
func (UnimplementedLogicServiceServer) Pull(context.Context, *LogicPullRequest) (*LogicPullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedLogicServiceServer) Sync(context.Context, *pb.Logic) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedLogicServiceServer) mustEmbedUnimplementedLogicServiceServer() {}

// UnsafeLogicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogicServiceServer will
// result in compilation errors.
type UnsafeLogicServiceServer interface {
	mustEmbedUnimplementedLogicServiceServer()
}

func RegisterLogicServiceServer(s grpc.ServiceRegistrar, srv LogicServiceServer) {
	s.RegisterService(&LogicService_ServiceDesc, srv)
}

func _LogicService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Logic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServiceServer).Create(ctx, req.(*pb.Logic))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Logic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServiceServer).Update(ctx, req.(*pb.Logic))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicService_View_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServiceServer).View(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicService_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServiceServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicService_Name_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServiceServer).Name(ctx, req.(*pb.Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServiceServer).Delete(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServiceServer).List(ctx, req.(*LogicListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicService_ViewWithDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServiceServer).ViewWithDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicService_ViewWithDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServiceServer).ViewWithDeleted(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicService_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServiceServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicService_Pull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServiceServer).Pull(ctx, req.(*LogicPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogicService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Logic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogicService_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServiceServer).Sync(ctx, req.(*pb.Logic))
	}
	return interceptor(ctx, in, info, handler)
}

// LogicService_ServiceDesc is the grpc.ServiceDesc for LogicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodes.LogicService",
	HandlerType: (*LogicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LogicService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LogicService_Update_Handler,
		},
		{
			MethodName: "View",
			Handler:    _LogicService_View_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _LogicService_Name_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LogicService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LogicService_List_Handler,
		},
		{
			MethodName: "ViewWithDeleted",
			Handler:    _LogicService_ViewWithDeleted_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _LogicService_Pull_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _LogicService_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodes/logic_service.proto",
}
